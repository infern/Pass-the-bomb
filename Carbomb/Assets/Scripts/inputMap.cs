//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.0
//     from Assets/Scripts/inputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @inputMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @inputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""inputMap"",
    ""maps"": [
        {
            ""name"": ""car"",
            ""id"": ""a80f6f62-bfcc-4dd5-bd44-3edc97854be8"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""aabcfa5f-13fc-4126-99ec-3fd303c7f861"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""speedBurst"",
                    ""type"": ""Value"",
                    ""id"": ""14c38ea9-f1e2-462f-bbb6-fe3da18f8782"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c5c274ad-23bd-4c45-8f2e-99ffc9af4265"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2485b538-620d-4afc-988a-4b1c8e112632"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""822f8610-8dd4-4b97-aa36-a281ef03ff43"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""049c5939-02ad-42a5-a3a8-d4e7a1ee4d21"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""817709d6-0a89-4a51-9fb7-72793623701b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8fae4e83-49d4-46d6-a263-fc2c3d295811"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""723daf6a-8231-4d70-8790-aa36434926da"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""speedBurst"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // car
        m_car = asset.FindActionMap("car", throwIfNotFound: true);
        m_car_move = m_car.FindAction("move", throwIfNotFound: true);
        m_car_speedBurst = m_car.FindAction("speedBurst", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // car
    private readonly InputActionMap m_car;
    private ICarActions m_CarActionsCallbackInterface;
    private readonly InputAction m_car_move;
    private readonly InputAction m_car_speedBurst;
    public struct CarActions
    {
        private @inputMap m_Wrapper;
        public CarActions(@inputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_car_move;
        public InputAction @speedBurst => m_Wrapper.m_car_speedBurst;
        public InputActionMap Get() { return m_Wrapper.m_car; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarActions set) { return set.Get(); }
        public void SetCallbacks(ICarActions instance)
        {
            if (m_Wrapper.m_CarActionsCallbackInterface != null)
            {
                @move.started -= m_Wrapper.m_CarActionsCallbackInterface.OnMove;
                @move.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnMove;
                @move.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnMove;
                @speedBurst.started -= m_Wrapper.m_CarActionsCallbackInterface.OnSpeedBurst;
                @speedBurst.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnSpeedBurst;
                @speedBurst.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnSpeedBurst;
            }
            m_Wrapper.m_CarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @move.started += instance.OnMove;
                @move.performed += instance.OnMove;
                @move.canceled += instance.OnMove;
                @speedBurst.started += instance.OnSpeedBurst;
                @speedBurst.performed += instance.OnSpeedBurst;
                @speedBurst.canceled += instance.OnSpeedBurst;
            }
        }
    }
    public CarActions @car => new CarActions(this);
    public interface ICarActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSpeedBurst(InputAction.CallbackContext context);
    }
}
